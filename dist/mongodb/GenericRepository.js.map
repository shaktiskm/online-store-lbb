{"version":3,"sources":["../../lib/mongodb/GenericRepository.es6"],"names":["require","MongoClient","Q","protectedGenericRepoIns","GenericRepository","config","mongoDb","connectionString","Error","connectionString_","connectionOptions_","connectionOptions","operationTimeout_","operationTimeout","promiseTimeout_","promiseTimeout","dbConnection_","connectToDB","console","log","ninvoke","catch","error","err","then","dbConn","query","fields","limit","skip","sort","collection","options","push","body","readQuery","getMongoDBObject","npost","db","cursor","results","pipeline","document","documents","getGenericRepoIns","module","exports"],"mappings":"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","file":"GenericRepository.js","sourcesContent":["const {MongoClient} = require(\"mongodb\"),\n  Q = require(\"q\");\n\nlet protectedGenericRepoIns;\n\nclass GenericRepository {\n\n  constructor(config) {\n    if (!config || !config.mongoDb.connectionString) {\n      throw new Error(\"MongoDB connection string not available\");\n    }\n\n    /** @member {string} Connection string to database. */\n    this.connectionString_ = config.mongoDb.connectionString;\n\n    /** @member {Object} Options object to pass to the driver connect method. */\n    this.connectionOptions_ = config.mongoDb.connectionOptions;\n\n    /** @member {string} Operation timeout in ms. */\n    this.operationTimeout_ = config.mongoDb.operationTimeout;\n\n    /** @member {number} The default timeout for promises in ms */\n    this.promiseTimeout_ = config.mongoDb.promiseTimeout;\n\n    /** @member {Q.Promise} Promise which represents the db connection and resolves to the db controller object. */\n    this.dbConnection_ = this.connectToDB();\n  }\n\n  /**\n   * Create connection to the mongodb database.\n   * @private\n   * @returns {Q.Promise} A promise which resolves the connection to the mongodb client.\n   */\n  connectToDB() {\n    console.log(\"Connecting to db with options: \", this.connectionString_);\n    this.dbConnection_ = Q.ninvoke(MongoClient, \"connect\", this.connectionString_, this.connectionOptions_);\n    return this.dbConnection_;\n  }\n\n  /**\n   * function for creating the mongodb object.\n   * @returns {object} mongodb object after creating the connection.\n   */\n  getMongoDBObject() {\n\n    return this.dbConnection_\n      .catch(err => {\n        console.error(\" MongoDB connection is not available\", err);\n        return this.connectToDB();\n      })\n      .then(dbConn => {\n        return dbConn;\n      });\n  }\n\n  /**\n   *@param {object} query read query\n   *@returns {object} returns promise for read query\n   */\n  readQuery(query) {\n\n    return {\n      \"fields\": query.fields || {},\n      \"limit\": query.limit || 0,\n      \"skip\": query.skip || 0,\n      \"sort\": query.sort || {}\n    };\n  }\n\n  /**\n   *@param {string} collection collection to be used for query\n   *@param {object} query query object which contains body(filter query), fields, limit, skip, sort fields\n   *@returns {Q.Promise} returns promise for read query\n   */\n  read({collection, query}) {\n\n    let options = [];\n\n    options.push(query.body);\n    options.push(this.readQuery(query));\n\n    return this.getMongoDBObject()\n      .then(db => {\n        return Q.npost(\n          db.collection(collection), \"find\", options\n        )\n          .then(cursor => {\n            return Q.ninvoke(cursor, \"toArray\"\n            )\n              .then(results => {\n                return results;\n              });\n          });\n      });\n  }\n\n  /**\n   *@param {string} collection collection to be used for query\n   *@param {object} pipeline pipeline to be used in aggregation\n   *@returns {Q.Promise} returns promise for aggregation\n   */\n  aggregate({collection, pipeline}) {\n\n    return this.getMongoDBObject()\n      .then(db => {\n        return Q.ninvoke(\n          db.collection(collection),\n          \"aggregate\",\n          pipeline,\n          {\n            \"allowDiskUse\": false\n          }\n        );\n      });\n  }\n\n  /**\n   *\n   * @param {string} collection name.\n   * @param {object} object to be inserted into the collections\n   * @returns {Q.Promise} returns promise for insertion\n   */\n\n  insertOne({collection, document}) {\n    return this.getMongoDBObject()\n      .then(db => {\n        return Q.ninvoke(db.collection(collection), \"insertOne\", document);\n      });\n  }\n\n  insert({collection, documents}) {\n    return this.getMongoDBObject()\n      .then(db => {\n        return Q.ninvoke(db.collection(collection), \"insert\", documents);\n      });\n  }\n\n  update({collection, query, document}) {\n    return this.getMongoDBObject()\n      .then(db => {\n        return Q.ninvoke(db.collection(collection), \"updateOne\", query, document);\n      });\n  }\n\n  remove({collection, document}) {\n    return this.getMongoDBObject()\n      .then(db => {\n        return Q.ninvoke(db.collection(collection), \"deleteOne\", document);\n      });\n  }\n}\n\nfunction getGenericRepoIns(config) {\n  protectedGenericRepoIns = protectedGenericRepoIns || new GenericRepository(config);\n  return protectedGenericRepoIns;\n}\n\nmodule.exports = getGenericRepoIns;\n"]}