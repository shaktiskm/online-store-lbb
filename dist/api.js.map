{"version":3,"sources":["../lib/api.es6"],"names":["express","require","bodyparser","methodOverride","checkEnvironmentVariables","ApiError","mwAllowCrossDomain","mwAuthenticateRequest","mwErrorHandler","mwAddRequestId","mwGenerateUserToken","problem2Router","productRouter","NODE_ENV","process","env","nodeEnv","config","Object","freeze","urlPrefix","app","environmentVariables","environmentVariableChecker","isEnabled","set","http","port","secretKey","use","json","get","req","res","send","post","next","apiError","listen","console","log","module","exports"],"mappings":";;AAAA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AAAA,IACEC,aAAaD,QAAQ,aAAR,CADf;AAAA,IAEEE,iBAAiBF,QAAQ,iBAAR,CAFnB;AAAA,IAGEG,4BAA4BH,QAAQ,kCAAR,CAH9B;AAAA,IAIEI,WAAWJ,QAAQ,iBAAR,CAJb;AAAA,IAKEK,qBAAqBL,QAAQ,0CAAR,CALvB;AAAA,IAMEM,wBAAwBN,QAAQ,6CAAR,CAN1B;AAAA,IAOEO,iBAAiBP,QAAQ,sCAAR,CAPnB;AAAA,IAQEQ,iBAAiBR,QAAQ,sCAAR,CARnB;AAAA,IASES,sBAAsBT,QAAQ,2CAAR,CATxB;AAAA,IAUEU,iBAAiBV,QAAQ,sBAAR,CAVnB;AAAA,IAWEW,gBAAgBX,QAAQ,qBAAR,CAXlB;;AAcI,IAACY,QAAD,GAAaC,QAAQC,GAArB,CAACF,QAAD;AAAA,IACFG,OADE,GACQH,YAAY,OADpB;AAAA,IAEFI,MAFE,GAEOC,OAAOC,MAAP,CAAclB,QAAQ,eAAee,OAAvB,CAAd,CAFP;AAAA,IAGFI,SAHE,GAGUH,OAAOG,SAHjB;AAAA,IAIFC,GAJE,GAIIrB,SAJJ;AAAA,IAKFsB,oBALE,GAKqBrB,QAAQ,gCAAR,CALrB;;AAOJ;AACA;AACA,IAAIgB,OAAOM,0BAAP,CAAkCC,SAAtC,EAAiD;AAC/CpB,4BAA0BkB,oBAA1B;AACD;;AAED;AACAD,IAAII,GAAJ,CAAQ,MAAR,EAAgBR,OAAOS,IAAP,CAAYC,IAA5B;AACAN,IAAII,GAAJ,CAAQ,WAAR,EAAqBR,OAAOW,SAA5B;;AAEAP,IAAIQ,GAAJ,CAAQvB,kBAAR;AACAe,IAAIQ,GAAJ,CAAQ3B,WAAW4B,IAAX,EAAR;;AAEA;AACAT,IAAIU,GAAJ,CAAWX,SAAX,mBAAoC,UAACY,GAAD,EAAMC,GAAN,EAAc;AAChDA,MAAIC,IAAJ,CAAS,EAAC,OAAO,IAAR,EAAT;AACD,CAFD;;AAIA;AACAb,IAAIQ,GAAJ,CAAQpB,cAAR;;AAEAY,IAAIQ,GAAJ,CAAQ,WAAR,EAAqBlB,cAArB;;AAEA;AACAU,IAAIc,IAAJ,CAAS,gBAAT,EAA2BzB,mBAA3B;;AAEA;AACAW,IAAIQ,GAAJ,CAAQtB,qBAAR;;AAEA;AACAc,IAAIQ,GAAJ,CAAQ,WAAR,EAAqBjB,aAArB;;AAEAS,IAAIQ,GAAJ,CAAQ,UAACG,GAAD,EAAMC,GAAN,EAAWG,IAAX,EAAoB;AAC1B,MAAIC,WAAW,IAAIhC,QAAJ,CAAa,UAAb,EAAyB,wBAAzB,EAAmD,EAAnD,EAAuD,GAAvD,CAAf;;AAEA,SAAO+B,KAAKC,QAAL,CAAP;AACD,CAJD;AAKAhB,IAAIQ,GAAJ,CAAQ1B,cAAR;AACAkB,IAAIQ,GAAJ,CAAQrB,cAAR;;AAEAa,IAAIiB,MAAJ,CAAWjB,IAAIU,GAAJ,CAAQ,MAAR,CAAX,EAA4B,YAAM;AAChCQ,UAAQC,GAAR,sCAA+CnB,IAAIU,GAAJ,CAAQ,MAAR,CAA/C;AACD,CAFD;;AAIAU,OAAOC,OAAP,GAAiBrB,GAAjB","file":"api.js","sourcesContent":["const express = require(\"express\"),\n  bodyparser = require(\"body-parser\"),\n  methodOverride = require(\"method-override\"),\n  checkEnvironmentVariables = require(\"./util/checkEnvironmentVariables\"),\n  ApiError = require(\"./util/apiError\"),\n  mwAllowCrossDomain = require(\"./middleware_services/mwAllowCrossDomain\"),\n  mwAuthenticateRequest = require(\"./middleware_services/mwAuthenticateRequest\"),\n  mwErrorHandler = require(\"./middleware_services/mwErrorHandler\"),\n  mwAddRequestId = require(\"./middleware_services/mwAddRequestId\"),\n  mwGenerateUserToken = require(\"./middleware_services/mwGenerateUserToken\"),\n  problem2Router = require(\"./endpoints/problem2\"),\n  productRouter = require(\"./endpoints/product\");\n\n\nlet {NODE_ENV} = process.env,\n  nodeEnv = NODE_ENV || \"local\",\n  config = Object.freeze(require(\"../config/\" + nodeEnv)),\n  urlPrefix = config.urlPrefix,\n  app = express(),\n  environmentVariables = require(\"../config/environmentVariables\");\n\n// Checks the required enviro// Defines top middleware and routesnment variables\n// Logs the missing environment variables and exit the application\nif (config.environmentVariableChecker.isEnabled) {\n  checkEnvironmentVariables(environmentVariables);\n}\n\n// set the relevant config app wise\napp.set(\"port\", config.http.port);\napp.set(\"secretKey\", config.secretKey);\n\napp.use(mwAllowCrossDomain);\napp.use(bodyparser.json());\n\n// HealthCheck Endpoint --> GET ...v1/healthcheck\napp.get(`${urlPrefix}/healthcheck`, (req, res) => {\n  res.send({\"msg\": \"OK\"});\n});\n\n// App routes here\napp.use(mwAddRequestId);\n\napp.use(\"/problem2\", problem2Router);\n\n// JWT Authentication Implemented -- Generate Token\napp.post(\"/generateToken\", mwGenerateUserToken);\n\n// JWT Authentication Implemented -- Verify Token & User\napp.use(mwAuthenticateRequest);\n\n// Simple Product Add, Delete, Edit, Search Routes\napp.use(\"/products\", productRouter);\n\napp.use((req, res, next) => {\n  let apiError = new ApiError(\"NotFound\", \"Resource doesn't exist\", \"\", 404);\n\n  return next(apiError);\n});\napp.use(methodOverride);\napp.use(mwErrorHandler);\n\napp.listen(app.get(\"port\"), () => {\n  console.log(`Server is listening on port --> ${app.get(\"port\")}`);\n});\n\nmodule.exports = app;\n"]}