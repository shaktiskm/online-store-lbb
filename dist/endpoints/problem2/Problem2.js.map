{"version":3,"sources":["../../../lib/endpoints/problem2/Problem2.es6"],"names":["documentSchema","require","ApiError","protectedService","Problem2Service","dbService","genericValidatorIns","_dbService","_genericValidator","req","res","next","payload","body","isSchemaValidated","distinctCategoryIds","rejectedPayloadDocs","schemaValidation","console","log","getDistinctCategories","checkDBExistingCategories","then","finalDocToSave","categoryIds","categoryArr","map","catObj","_id","filter","indexOf","item","category","push","saveDocuments","bind","response","success","result","status","send","catch","err","name","apiError","id","message","apiErr","categoryDocs","categorySet","Set","forEach","add","collection","query","read","error","docsToSave","documents","insert","getServiceInstance","module","exports"],"mappings":"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","file":"Problem2.js","sourcesContent":["const documentSchema = require(\"../../schemas/document\"),\n  ApiError = require(\"../../util/apiError\");\n\nlet protectedService;\n\nclass Problem2Service {\n\n  constructor(dbService, genericValidatorIns) {\n    this._dbService = dbService;\n    this._genericValidator = genericValidatorIns;\n  }\n\n  saveAssociatedCategory(req, res, next) {\n    let payload = req.body,\n      isSchemaValidated = false,\n      distinctCategoryIds,\n      rejectedPayloadDocs = [];\n\n    try {\n      isSchemaValidated = this._genericValidator.schemaValidation(payload, documentSchema);\n\n      if (isSchemaValidated) {\n        console.log(\"saveAssociatedCategory()// Payload Validation Successful.\");\n        distinctCategoryIds = this.getDistinctCategories(payload);\n\n        this.checkDBExistingCategories([...distinctCategoryIds])\n          .then(categoryArr => {\n\n            let finalDocToSave,\n              categoryIds = categoryArr.map(catObj => catObj._id);\n\n            finalDocToSave = payload.filter(item => {\n              if (categoryIds.indexOf(item.category) !== -1) {\n                return true;\n              }\n              rejectedPayloadDocs.push(item);\n              return false;\n            });\n\n            return finalDocToSave;\n          })\n          .then(this.saveDocuments.bind(this))\n          .then(success => {\n            let response = {\n              \"status\": \"success\",\n              \"rejectedDocuments\": rejectedPayloadDocs\n            };\n\n            console.log(\"Documents saved successfully...\", success.result);\n\n            res.status(200).send(response);\n          })\n          .catch(err => {\n            if (err.name === \"MongoError\") {\n              let apiError = new ApiError(req.id, \"DuplicateError\", \"Duplicate Document Error\", \"\", 400);\n\n              console.log(\"saveAssociatedCategory()// Going to create duplicate document in db --> \", err.message);\n              return next(apiError);\n            }\n            console.log(\"saveAssociatedCategory()// Error while computing --> \", err);\n            next(err);\n          });\n      }\n\n    } catch (err) {\n      let apiErr = new ApiError(req.id, \"ValidationError\", \"Bad Request\", err, 400);\n\n      console.log(\"saveAssociatedCategory()//Error in validating schema ...\", err);\n\n      return next(apiErr);\n    }\n  }\n\n  getDistinctCategories(categoryDocs) {\n    let categorySet = new Set();\n\n    categoryDocs.forEach(item => categorySet.add(item.category));\n\n    return categorySet;\n  }\n\n  checkDBExistingCategories(distinctCategoryIds) {\n    let collection = \"categories\",\n      query = {\n        \"body\": {\n          \"_id\": {\n            \"$in\": distinctCategoryIds\n          }\n        },\n        \"fields\": {\n          \"_id\": 1\n        }\n      };\n\n    return this._dbService.read({collection, query})\n      .catch(error => {\n        console.log(\"checkDBExistingCategories()//Error while getting categories from database.\");\n        throw error;\n      });\n  }\n\n  saveDocuments(docsToSave) {\n    let collection = \"document_categories\",\n      documents = docsToSave;\n\n    console.log(`saveDocuments()//Documents going to save in collection: ${collection} --> `, documents);\n\n    return this._dbService.insert({collection, documents});\n  }\n\n}\n\nfunction getServiceInstance(dbService, genericValidatorIns) {\n  protectedService = protectedService || new Problem2Service(dbService, genericValidatorIns);\n  return protectedService;\n}\n\nmodule.exports = getServiceInstance;\n"]}