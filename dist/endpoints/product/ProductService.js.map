{"version":3,"sources":["../../../lib/endpoints/product/ProductService.es6"],"names":["ApiError","require","protectedService","ProductService","dbService","uniqueIdService","_dbService","UniqueIdService","collection","req","res","next","query","read","then","console","log","successResponse","id","result","successHandler","Id","catch","err","errorHandler","payload","body","uniqueId","createUniqueId","document","Object","assign","insertOne","success","productId","params","update","modifiedCount","remove","deletedCount","qty","data","reqId","keys","length","status","send","apiErr","getServiceInstance","module","exports"],"mappings":"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","file":"ProductService.js","sourcesContent":["const ApiError = require(\"../../util/apiError\");\n\nlet protectedService;\n\nclass ProductService {\n\n  constructor(dbService, uniqueIdService) {\n    this._dbService = dbService;\n    ProductService.UniqueIdService = uniqueIdService;\n    this.collection = \"products\";\n  }\n\n  static successHandler(data, reqId, res, next) {\n    if (!data || Object.keys(data).length === 0) {\n      return next(new ApiError(reqId, \"Not Found\", \"Resource does not exist\", \"\", 404));\n    }\n    res.status(200).send(data);\n  }\n\n  static errorHandler(err, reqId, next) {\n    let apiErr = new ApiError(reqId, \"Error\", \"Internal Server Error\", err, 500);\n\n    next(apiErr);\n  }\n\n  retrieveProducts(req, res, next) {\n    let collection = this.collection,\n      query = {};\n\n    this._dbService\n      .read({collection, query})\n      .then(result => {\n        console.log(\"retrieveProducts()//Successfully retrieved products\");\n        let successResponse = {\n          \"reqId\": req.id,\n          \"status\": \"success\",\n          \"data\": result\n        };\n\n        ProductService.successHandler(successResponse, req.Id, res, next);\n      })\n      .catch(err => {\n        console.log(\"retrieveProducts()//Error in retrieving products\", err);\n        ProductService.errorHandler(err, req.id, next);\n      });\n  }\n\n  createProduct(req, res, next) {\n    let collection = this.collection,\n      payload = req.body,\n      uniqueId = ProductService.UniqueIdService.createUniqueId(),\n      document = Object.assign(payload, {\"_id\": uniqueId});\n\n    this._dbService\n      .insertOne({collection, document})\n      .then(success => {\n        console.log(\"createProduct()//Successfully created product with dbResult\", success.result);\n        let successResponse = {\n          \"reqId\": req.id,\n          \"id\": uniqueId,\n          \"status\": \"success\"\n        };\n\n        ProductService.successHandler(successResponse, req.Id, res, next);\n      })\n      .catch(err => {\n        console.log(\"createProduct()//Error in creating product\", err);\n        ProductService.errorHandler(err, req.id, next);\n      });\n\n  }\n\n  retrieveProductById(req, res, next) {\n    let collection = this.collection,\n      productId = req.params.id,\n      query = {\n        \"_id\": productId\n      };\n\n    this._dbService\n      .read({collection, query})\n      .then(result => {\n        console.log(`retrieveProductById()//Successfully retrieved product with id ${productId}`);\n        let successResponse = {\n          \"reqId\": req.id,\n          \"status\": \"success\",\n          \"data\": result\n        };\n\n        ProductService.successHandler(successResponse, req.Id, res, next);\n      })\n      .catch(err => {\n        console.log(\"retrieveProductById()//Error in retrieving product\", err);\n        ProductService.errorHandler(err, req.id, next);\n      });\n  }\n\n  updateProductById(req, res, next) {\n    let collection = this.collection,\n      productId = req.params.id,\n      payload = req.body,\n      query = {\n        \"_id\": productId\n      },\n      document = {\n        \"$set\": payload\n      };\n\n    this._dbService\n      .update({collection, query, document})\n      .then(result => {\n        console.log(`updateProductById()//Successfully updated product with id ${productId} and dbResult modifiedCount`,\n          result.modifiedCount);\n        let successResponse = {\n          \"reqId\": req.id,\n          \"id\": productId,\n          \"status\": \"success\"\n        };\n\n        ProductService.successHandler(successResponse, req.Id, res, next);\n      })\n      .catch(err => {\n        console.log(\"updateProductById()//Error in updating product\", err);\n        ProductService.errorHandler(err, req.id, next);\n      });\n\n  }\n\n  deleteProductById(req, res, next) {\n    let collection = this.collection,\n      productId = req.params.id,\n      document = {\n        \"_id\": productId\n      };\n\n    this._dbService\n      .remove({collection, document})\n      .then(result => {\n        console.log(`deleteProductById()//Successfully removed product with id ${productId} and dbResult deletedCount`,\n          result.deletedCount);\n        let successResponse = {\n          \"reqId\": req.id,\n          \"id\": productId,\n          \"status\": \"success\"\n        };\n\n        ProductService.successHandler(successResponse, req.Id, res, next);\n      })\n      .catch(err => {\n        console.log(\"deleteProductById()//Error in removing product\", err);\n        ProductService.errorHandler(err, req.id, next);\n      });\n\n  }\n\n  addOrRemoveProductQty(req, res, next) {\n    let collection = this.collection,\n      productId = req.params.id,\n      payload = req.body,\n      query = {\n        \"_id\": productId\n      },\n      document = {\n        \"$inc\": {\n          \"qty\": payload.qty\n        }\n      };\n\n    this._dbService\n      .update({collection, query, document})\n      .then(result => {\n        console.log(`addOrRemoveProductQty()//Successfully updated product quantity with id ${productId}`,\n          result.modifiedCount);\n        let successResponse = {\n          \"reqId\": req.id,\n          \"id\": productId,\n          \"status\": \"success\"\n        };\n\n        ProductService.successHandler(successResponse, req.Id, res, next);\n      })\n      .catch(err => {\n        console.log(\"addOrRemoveProductQty()//Error in updating product quantity\", err);\n        ProductService.errorHandler(err, req.id, next);\n      });\n  }\n\n}\n\n\nfunction getServiceInstance(dbService, uniqueIdService) {\n  protectedService = protectedService || new ProductService(dbService, uniqueIdService);\n  return protectedService;\n}\n\nmodule.exports = getServiceInstance;\n"]}