{"version":3,"sources":["../../lib/middleware_services/mwAuthenticateRequest.es6"],"names":["JWT","require","ApiError","mwAuthenticateRequest","req","res","next","NODE_ENV","process","env","nodeEnv","config","Object","freeze","secret","app","get","jwtInstance","tokenRegex","RegExp","token","header","authorization","authorize","console","log","test","err","id","split","verifyToken","then","data","user","error","failure","module","exports"],"mappings":";;AACA,IAAMA,MAAMC,QAAQ,0BAAR,CAAZ;AAAA,IACEC,WAAWD,QAAQ,kBAAR,CADb;;AAGA,SAASE,qBAAT,CAA+BC,GAA/B,EAAoCC,GAApC,EAAyCC,IAAzC,EAA+C;AAEzC,MAACC,QAAD,GAAaC,QAAQC,GAArB,CAACF,QAAD;AAAA,MACFG,OADE,GACQH,YAAY,OADpB;AAAA,MAEFI,MAFE,GAEOC,OAAOC,MAAP,CAAcZ,QAAQ,kBAAkBS,OAA1B,CAAd,CAFP;AAAA,MAGFI,MAHE,GAGOV,IAAIW,GAAJ,CAAQC,GAAR,CAAY,WAAZ,CAHP;AAAA,MAIFC,WAJE,GAIY,IAAIjB,GAAJ,CAAQc,MAAR,CAJZ;AAAA,MAKFI,UALE,GAKW,IAAIC,MAAJ,CAAW,gBAAX,CALX;AAAA,MAMFC,KANE,GAMMhB,IAAIiB,MAAJ,CAAW,eAAX,CANN;;;AAQJ,MAAI,CAACV,OAAOW,aAAP,CAAqBC,SAA1B,EAAqC;AACnCC,YAAQC,GAAR,CAAY,yEAAZ;AACA,WAAOnB,MAAP;AACD;;AAED,MAAI,CAACc,KAAD,IAAU,CAACF,WAAWQ,IAAX,CAAgBN,KAAhB,CAAf,EAAuC;AACrCI,YAAQC,GAAR,CAAY,gFAAZ;AACA,QAAIE,MAAM,IAAIzB,QAAJ,CAAaE,IAAIwB,EAAjB,EAAqB,cAArB,EAAqC,iDAArC,EAAwF,EAAxF,EAA4F,GAA5F,CAAV;;AAEA,WAAOtB,KAAKqB,GAAL,CAAP;AACD;;AAEDP,UAAQA,MAAMS,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAR;;AAEAZ,cACGa,WADH,CACeV,KADf,EAEGW,IAFH,CAEQ,gBAAQ;AACZP,YAAQC,GAAR,CAAY,8EAAZ,EAA4FO,IAA5F;AACA5B,QAAI6B,IAAJ,GAAWD,IAAX;AACA,WAAO1B,MAAP;AAED,GAPH,EAOK,mBAAW;AACZkB,YAAQU,KAAR,CAAc,8DAAd,EAA8EC,OAA9E;AACA,WAAO7B,KAAK,IAAIJ,QAAJ,CAAaE,IAAIwB,EAAjB,EAAqB,aAArB,EAAoC,2BAApC,EAAiE,EAAjE,EAAqE,GAArE,CAAL,CAAP;AACD,GAVH;AAWD;;AAEDQ,OAAOC,OAAP,GAAiBlC,qBAAjB","file":"mwAuthenticateRequest.js","sourcesContent":["\nconst JWT = require(\"../util/JWTImplementaion\"),\n  ApiError = require(\"../util/apiError\");\n\nfunction mwAuthenticateRequest(req, res, next) {\n\n  let {NODE_ENV} = process.env,\n    nodeEnv = NODE_ENV || \"local\",\n    config = Object.freeze(require(\"../../config/\" + nodeEnv)),\n    secret = req.app.get(\"secretKey\"),\n    jwtInstance = new JWT(secret),\n    tokenRegex = new RegExp(\"^(b|B)earer\\\\s\"),\n    token = req.header(\"Authorization\");\n\n  if (!config.authorization.authorize) {\n    console.log(\"mwAuthenticateRequest()//Authentication is disabled by configuration...\");\n    return next();\n  }\n\n  if (!token || !tokenRegex.test(token)) {\n    console.log(\"mwAuthenticateRequest()//Authentication credentials were missing or incorrect.\");\n    let err = new ApiError(req.id, \"Unauthorized\", \"Authentication credentials missing or incorrect\", \"\", 401);\n\n    return next(err);\n  }\n\n  token = token.split(\" \")[1];\n\n  jwtInstance\n    .verifyToken(token)\n    .then(data => {\n      console.log(\"mwAuthenticateRequest()//Authentication Token verification done successfully\", data);\n      req.user = data;\n      return next();\n\n    }, failure => {\n      console.error(\"mwAuthenticateRequest()//Unable to verify the supplied token\", failure);\n      return next(new ApiError(req.id, \"Bad Request\", \"Token Verification Failed\", \"\", 400));\n    });\n}\n\nmodule.exports = mwAuthenticateRequest;\n"]}