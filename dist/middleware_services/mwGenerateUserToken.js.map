{"version":3,"sources":["../../lib/middleware_services/mwGenerateUserToken.es6"],"names":["JWT","require","ApiError","mwGenerateUserToken","req","res","next","secret","app","get","jwtInstance","payload","body","payloadData","token","options","userId","console","error","id","sign","log","successResponse","status","send","err","module","exports"],"mappings":";;AAAA,IAAMA,MAAMC,QAAQ,0BAAR,CAAZ;AAAA,IACEC,WAAWD,QAAQ,kBAAR,CADb;;AAGA,SAASE,mBAAT,CAA6BC,GAA7B,EAAkCC,GAAlC,EAAuCC,IAAvC,EAA6C;AAC3C,MAAIC,SAASH,IAAII,GAAJ,CAAQC,GAAR,CAAY,WAAZ,CAAb;AAAA,MACEC,cAAc,IAAIV,GAAJ,CAAQO,MAAR,CADhB;AAAA,MAEEI,UAAUP,IAAIQ,IAFhB;AAAA,MAGEC,oBAHF;AAAA,MAIEC,cAJF;AAAA,MAKEC,UAAU;AACR,iBAAa;AADL,GALZ;;AASA,MAAI,CAACJ,QAAQK,MAAb,EAAqB;AACnBC,YAAQC,KAAR,CAAc,uDAAd;AACA,WAAOZ,KAAK,IAAIJ,QAAJ,CAAaE,IAAIe,EAAjB,EAAqB,aAArB,EAAoC,2CAApC,EAAiF,EAAjF,EAAqF,GAArF,CAAL,CAAP;AACD;;AAEDN,gBAAc;AACZ,cAAUF,QAAQK;AADN,GAAd;;AAIA,MAAI;AACFF,YAAQJ,YAAYU,IAAZ,CAAiBP,WAAjB,EAA8BE,OAA9B,CAAR;;AAEAE,YAAQI,GAAR,CAAY,sEAAZ,EAAoFP,KAApF;AACA,QAAIQ,kBAAkB;AACpB,eAASlB,IAAIe,EADO;AAEpB,eAASL,KAFW;AAGpB,gBAAU;AAHU,KAAtB;;AAMAT,QAAIkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,eAArB;AAED,GAZD,CAYE,OAAOG,GAAP,EAAY;AACZR,YAAQC,KAAR,CAAc,uDAAd,EAAuEO,GAAvE;AACA,WAAOnB,KAAK,IAAIJ,QAAJ,CAAaE,IAAIe,EAAjB,EAAqB,aAArB,EAAoC,yBAApC,EAA+D,EAA/D,EAAmE,GAAnE,CAAL,CAAP;AACD;AACF;;AAEDO,OAAOC,OAAP,GAAiBxB,mBAAjB","file":"mwGenerateUserToken.js","sourcesContent":["const JWT = require(\"../util/JWTImplementaion\"),\n  ApiError = require(\"../util/apiError\");\n\nfunction mwGenerateUserToken(req, res, next) {\n  let secret = req.app.get(\"secretKey\"),\n    jwtInstance = new JWT(secret),\n    payload = req.body,\n    payloadData,\n    token,\n    options = {\n      \"expiresIn\": \"10h\"\n    };\n\n  if (!payload.userId) {\n    console.error(\"mwAuthenticateRequest()//Unable to generate the token\");\n    return next(new ApiError(req.id, \"Bad Request\", \"Token Generation Failed because of userId\", \"\", 400));\n  }\n\n  payloadData = {\n    \"userId\": payload.userId\n  };\n\n  try {\n    token = jwtInstance.sign(payloadData, options);\n\n    console.log(\"mwAuthenticateRequest()//Authentication Token generated successfully\", token);\n    let successResponse = {\n      \"reqId\": req.id,\n      \"token\": token,\n      \"status\": \"success\"\n    };\n\n    res.status(200).send(successResponse);\n\n  } catch (err) {\n    console.error(\"mwAuthenticateRequest()//Unable to generate the token\", err);\n    return next(new ApiError(req.id, \"Bad Request\", \"Token Generation Failed\", \"\", 400));\n  }\n}\n\nmodule.exports = mwGenerateUserToken;\n"]}