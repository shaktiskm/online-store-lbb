{"version":3,"sources":["../../lib/first_level_auth/firstLevelAuth.spec.es6"],"names":["request","require","expect","urlProvider","url","describe","agent","validToken","it","post","send","set","end","err","result","done","status","to","be","equal","body","an","put","get","del"],"mappings":";;AAAA,IAAIA,UAAUC,QAAQ,YAAR,CAAd;AAAA,IACEC,SAASD,QAAQ,MAAR,EAAgBC,MAD3B;AAAA,IAEEC,cAAcF,QAAQ,qBAAR,CAFhB;AAAA,IAGEG,MAAMD,YAAY,wBAAZ,CAHR;;AAKAE,SAAS,gCAAT,EAA2C,YAAM;;AAE/C,MAAIC,QAAQN,OAAZ;;AAEAK,WAAS,6BAAT,EAAwC,YAAM;;AAE5C,QAAIE,aAAa,2KAAjB;;AAEAC,OAAG,4BAAH,EAAiC,gBAAQ;;AAEvCF,YACGG,IADH,CACQL,GADR,EAEGM,IAFH,CAEQ,EAAC,OAAO,KAAR,EAFR,EAGGC,GAHH,CAGO,eAHP,cAGkCJ,UAHlC,EAIGK,GAJH,CAIO,UAACC,GAAD,EAAMC,MAAN,EAAiB;AACpB,YAAID,GAAJ,EAAS;AACP,iBAAOE,KAAKF,GAAL,CAAP;AACD;AACDX,eAAOY,OAAOE,MAAd,EAAsBC,EAAtB,CAAyBC,EAAzB,CAA4BC,KAA5B,CAAkC,GAAlC;AACAjB,eAAOY,OAAOM,IAAd,EAAoBH,EAApB,CAAuBC,EAAvB,CAA0BG,EAA1B,CAA6B,OAA7B;AACAN;AACD,OAXH;AAYD,KAdD;;AAgBAP,OAAG,2BAAH,EAAgC,gBAAQ;;AAEtCF,YACGgB,GADH,CACOlB,GADP,EAEGM,IAFH,CAEQ,EAAC,OAAO,KAAR,EAFR,EAGGC,GAHH,CAGO,eAHP,cAGkCJ,UAHlC,EAIGK,GAJH,CAIO,UAACC,GAAD,EAAMC,MAAN,EAAiB;AACpB,YAAID,GAAJ,EAAS;AACP,iBAAOE,KAAKF,GAAL,CAAP;AACD;AACDX,eAAOY,OAAOE,MAAd,EAAsBC,EAAtB,CAAyBC,EAAzB,CAA4BC,KAA5B,CAAkC,GAAlC;AACAjB,eAAOY,OAAOM,IAAd,EAAoBH,EAApB,CAAuBC,EAAvB,CAA0BG,EAA1B,CAA6B,OAA7B;AACAN;AACD,OAXH;AAYD,KAdD;;AAgBAP,OAAG,2BAAH,EAAgC,gBAAQ;;AAEtCF,YACGiB,GADH,CACOnB,GADP,EAEGO,GAFH,CAEO,eAFP,cAEkCJ,UAFlC,EAGGK,GAHH,CAGO,UAACC,GAAD,EAAMC,MAAN,EAAiB;AACpB,YAAID,GAAJ,EAAS;AACP,iBAAOE,KAAKF,GAAL,CAAP;AACD;AACDX,eAAOY,OAAOE,MAAd,EAAsBC,EAAtB,CAAyBC,EAAzB,CAA4BC,KAA5B,CAAkC,GAAlC;AACAjB,eAAOY,OAAOM,IAAd,EAAoBH,EAApB,CAAuBC,EAAvB,CAA0BG,EAA1B,CAA6B,OAA7B;AACAN;AACD,OAVH;AAWD,KAbD;;AAeAP,OAAG,2BAAH,EAAgC,gBAAQ;;AAEtCF,YACGkB,GADH,CACOpB,GADP,EAEGO,GAFH,CAEO,eAFP,cAEkCJ,UAFlC,EAGGK,GAHH,CAGO,UAACC,GAAD,EAAMC,MAAN,EAAiB;AACpB,YAAID,GAAJ,EAAS;AACP,iBAAOE,KAAKF,GAAL,CAAP;AACD;AACDX,eAAOY,OAAOE,MAAd,EAAsBC,EAAtB,CAAyBC,EAAzB,CAA4BC,KAA5B,CAAkC,GAAlC;AACAjB,eAAOY,OAAOM,IAAd,EAAoBH,EAApB,CAAuBC,EAAvB,CAA0BG,EAA1B,CAA6B,OAA7B;AACAN;AACD,OAVH;AAWD,KAbD;AAcD,GAjED;AAkED,CAtED","file":"firstLevelAuth.spec.js","sourcesContent":["let request = require(\"superagent\"),\n  expect = require(\"chai\").expect,\n  urlProvider = require(\"../util/urlProvider\"),\n  url = urlProvider(\"/first-level-auth-test\");\n\ndescribe(\"The first level authentication\", () => {\n\n  let agent = request;\n\n  describe(\"when valid token is present\", () => {\n\n    let validToken = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJzaGFrdGlza21AZ21haWwuY29tIiwiaWF0IjoxNDk0MjQyMTA1LCJleHAiOjE0OTQ4NDY5MDV9.AtJNVBg-jvDkr3oX8gb50BNj_i9rfxEdzHz3akUu8fk\";\n\n    it(\"should pass a post request\", done => {\n\n      agent\n        .post(url)\n        .send({\"foo\": \"bar\"})\n        .set(\"Authorization\", `Bearer ${validToken}`)\n        .end((err, result) => {\n          if (err) {\n            return done(err);\n          }\n          expect(result.status).to.be.equal(200);\n          expect(result.body).to.be.an(\"array\");\n          done();\n        });\n    });\n\n    it(\"should pass a put request\", done => {\n\n      agent\n        .put(url)\n        .send({\"foo\": \"bar\"})\n        .set(\"Authorization\", `Bearer ${validToken}`)\n        .end((err, result) => {\n          if (err) {\n            return done(err);\n          }\n          expect(result.status).to.be.equal(200);\n          expect(result.body).to.be.an(\"array\");\n          done();\n        });\n    });\n\n    it(\"should pass a get request\", done => {\n\n      agent\n        .get(url)\n        .set(\"Authorization\", `Bearer ${validToken}`)\n        .end((err, result) => {\n          if (err) {\n            return done(err);\n          }\n          expect(result.status).to.be.equal(200);\n          expect(result.body).to.be.an(\"array\");\n          done();\n        });\n    });\n\n    it(\"should pass a del request\", done => {\n\n      agent\n        .del(url)\n        .set(\"Authorization\", `Bearer ${validToken}`)\n        .end((err, result) => {\n          if (err) {\n            return done(err);\n          }\n          expect(result.status).to.be.equal(200);\n          expect(result.body).to.be.an(\"array\");\n          done();\n        });\n    });\n  });\n});\n"]}